# Fast builds
name: FastBuild

on: workflow_call

permissions:
  contents: read

env:
  BUILD_DIR : "${{github.workspace}}/build"
  INSTL_DIR : "${{github.workspace}}/install-dir"

jobs:
  FastBuild:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            build_tests: 'ON'
            simple_cmake: 'OFF'
          # pure C build (Windows)
          - os: windows-latest
            # Tests' building is off for a pure C build
            build_tests: 'OFF'
            simple_cmake: 'OFF'
    name: Fast builds (${{matrix.os}}, build_tests=${{matrix.build_tests}}, simple_cmake=${{matrix.simple_cmake}}, extra_build_options=${{matrix.extra_build_options}})
    runs-on: ${{ (matrix.os == 'ubuntu-latest' && github.repository_owner == 'oneapi-src') && 'intel-ubuntu-22.04' || matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    - name: "[Win] Conan"
      if: matrix.os == 'windows-latest'
      uses: conan-io/setup-conan@v1
      with:
         cache_packages: true

    - name: "[Win] Conan install"
      if: matrix.os == 'windows-latest'
      run: conan install . --build=missing

    - name: print content
      if: matrix.os == 'windows-latest'
      run: Get-ChildItem -Recurse -Force | Format-List

    - name: print files
      run: type "${{github.workspace}}\build\generators\jemallocTargets.cmake"
    - name: print files2
      run: type "${{github.workspace}}\build\generators\jemalloc-Target-release.cmake"
    - name: print files3
      run: type "${{github.workspace}}\build\generators\jemalloc-config.cmake"

    - name: Configure CMake
      if: matrix.simple_cmake == 'OFF'
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_TESTS=${{matrix.build_tests}}
        -DUMF_BUILD_EXAMPLES=ON
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=ON
        -DUMF_BUILD_CUDA_PROVIDER=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        -DUMF_BUILD_SHARED_LIBRARY=ON
        -G "Visual Studio 17 2022"
        -DCMAKE_TOOLCHAIN_FILE="${{github.workspace}}\build\generators\conan_toolchain.cmake"
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW

    - name: Configure CMake (simple)
      if: matrix.simple_cmake == 'ON'
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DUMF_BUILD_SHARED_LIBRARY=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        -G "Visual Studio 17 2022"
        -DCMAKE_TOOLCHAIN_FILE="${{github.workspace}}\build\generators\conan_toolchain.cmake"
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW

    - name: Build
      run: cmake --build ${{env.BUILD_DIR}} --config Release -j

    - name: Run examples
      working-directory: ${{env.BUILD_DIR}}
      run: ctest --output-on-failure --test-dir examples -C Release

    - name: Run tests
      if: matrix.build_tests == 'ON'
      working-directory: ${{env.BUILD_DIR}}
      run: ctest --output-on-failure --test-dir test -C Release

    # TODO: We could add some script to verify metadata of dll's (selected fields, perhaps)
    # ref. https://superuser.com/questions/381276/what-are-some-nice-command-line-ways-to-inspect-dll-exe-details
    - name: Print metadata of our dll's
      if: matrix.os == 'windows-latest'
      run: |
        get-command ${{github.workspace}}/build/bin/Release/umf.dll | format-list
        get-command ${{github.workspace}}/build/src/proxy_lib/Release/umf_proxy.dll | format-list
