# Builds project (with various compilers, CMake options, etc.) and runs tests
name: BasicBuilds

on: workflow_call

permissions:
  contents: read

env:
  BUILD_DIR : "${{github.workspace}}/build"
  INSTL_DIR : "${{github.workspace}}/../install-dir"
  COVERAGE_DIR : "${{github.workspace}}/coverage"
  COVERAGE_NAME : "exports-coverage-basic"

jobs:
  ubuntu-build:
    name: Ubuntu
    strategy:
      matrix:
        os: ['ubuntu-22.04']
        build_type: [Release]
        compiler: [{c: icx, cxx: icpx}]
        shared_library: ['OFF', 'ON']
        level_zero_provider: ['ON']
        cuda_provider: ['ON']
        install_tbb: ['ON']
        disable_hwloc: ['OFF']
        link_hwloc_statically: ['ON', 'OFF']
    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    - name: Install apt packages
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake libnuma-dev lcov

    - name: Install TBB apt package
      if: matrix.install_tbb == 'ON'
      run: |
        sudo apt-get install -y libtbb-dev

    - name: Install oneAPI basekit
      if: matrix.compiler.cxx == 'icpx'
      run: |
        sudo apt-get install -y gpg-agent wget
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install -y intel-oneapi-ippcp-devel intel-oneapi-ipp-devel intel-oneapi-common-oneapi-vars intel-oneapi-compiler-dpcpp-cpp
  
    - name: Install g++-7
      if: matrix.compiler.cxx == 'g++-7'
      run: sudo apt-get install -y ${{matrix.compiler.cxx}}

    - name: Install libhwloc
      run: .github/scripts/install_hwloc.sh

    - name: Get UMF version
      run: |
        VERSION=$(git describe --tags --abbrev=0 | grep -oP '\d+\.\d+\.\d+')
        echo "UMF_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Configure build
      run: >
        ${{ matrix.compiler.cxx == 'icpx' && '. /opt/intel/oneapi/setvars.sh &&' || ''}} 
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=${{matrix.level_zero_provider}}
        -DUMF_BUILD_CUDA_PROVIDER=${{matrix.cuda_provider}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        -DUMF_DISABLE_HWLOC=${{matrix.disable_hwloc}}
        -DUMF_LINK_HWLOC_STATICALLY=${{matrix.link_hwloc_statically}}
        ${{ matrix.build_type == 'Debug' && matrix.compiler.c == 'gcc' && '-DUMF_USE_COVERAGE=ON' || '' }}

    - name: Build UMF
      run: |
        ${{ matrix.compiler.cxx == 'icpx' && '. /opt/intel/oneapi/setvars.sh' || true }}
        cmake --build ${{env.BUILD_DIR}} -j $(nproc)

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: |
        ${{ matrix.compiler.cxx == 'icpx' && '. /opt/intel/oneapi/setvars.sh' || true }}
        LD_LIBRARY_PATH="${{env.BUILD_DIR}}/lib/:${LD_LIBRARY_PATH}" ctest --output-on-failure

    - name: Check coverage
      if:  ${{ matrix.build_type == 'Debug' && matrix.compiler.c == 'gcc' }}
      working-directory: ${{env.BUILD_DIR}}
      run: |
        export COVERAGE_FILE_NAME=${{env.COVERAGE_NAME}}-${{matrix.os}}-shared-${{matrix.shared_library}}-no_hwloc-${{matrix.disable_hwloc}}
        echo "COVERAGE_FILE_NAME: $COVERAGE_FILE_NAME"
        ../scripts/coverage/coverage_capture.sh $COVERAGE_FILE_NAME
        mkdir -p ${{env.COVERAGE_DIR}}
        mv ./$COVERAGE_FILE_NAME ${{env.COVERAGE_DIR}}

    - uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      if:  ${{ matrix.build_type == 'Debug' && matrix.compiler.c == 'gcc' }}
      with:
        name: ${{env.COVERAGE_NAME}}-${{matrix.os}}-shared-${{matrix.shared_library}}-no_hwloc-${{matrix.disable_hwloc}}
        path: ${{env.COVERAGE_DIR}}

    - name: Remove the installation directory
      run: rm -rf ${{env.INSTL_DIR}}

    - name: Test UMF installation and uninstallation
      # The '--shared-library' parameter is added to the installation test when the UMF is built as a shared library
      run: >
        python3 ${{github.workspace}}/test/test_installation.py
        --build-dir ${{env.BUILD_DIR}}
        --install-dir ${{env.INSTL_DIR}}
        --build-type ${{matrix.build_type}}
        --disjoint-pool
        ${{ matrix.install_tbb == 'ON' && matrix.disable_hwloc != 'ON' && matrix.shared_library == 'ON' && '--proxy' || '' }}
        --umf-version ${{env.UMF_VERSION}}
        ${{ matrix.shared_library == 'ON' && '--shared-library' || '' }}
