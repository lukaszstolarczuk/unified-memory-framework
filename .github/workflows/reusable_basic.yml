# Builds project (with various compilers, CMake options, etc.) and runs tests
name: BasicBuilds

on: workflow_call

permissions:
  contents: read

env:
  BUILD_DIR : "${{github.workspace}}/build"
  INSTL_DIR : "${{github.workspace}}/../install-dir"
  COVERAGE_DIR : "${{github.workspace}}/coverage"
  COVERAGE_NAME : "exports-coverage-basic"

jobs:
  windows-build:
    name: Windows
    env:
      VCPKG_PATH: "${{github.workspace}}/build/vcpkg/packages/hwloc_x64-windows;${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows;${{github.workspace}}/build/vcpkg/packages/jemalloc_x64-windows"
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2019', 'windows-2022']
        build_type: [Release]
        compiler: [{c: gcc, cxx: gcc}] # {c: clang-cl, cxx: clang-cl},
        shared_library: ['ON', 'OFF']
        level_zero_provider: ['OFF']
        cuda_provider: ['OFF']
    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    - name: Initialize vcpkg
      uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1 # v11.5
      with:
        vcpkgGitCommitId: 3dd44b931481d7a8e9ba412621fa810232b66289
        vcpkgDirectory: ${{env.BUILD_DIR}}/vcpkg
        vcpkgJsonGlob: '**/vcpkg.json'

    - name: Install dependencies
      run: vcpkg install
      shell: pwsh # Specifies PowerShell as the shell for running the script.

    - name: Configure MSVC environment
      uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0

    # choco install make
    # echo "$PATH;C:\ProgramData\chocolatey\lib\make" >> $GITHUB_PATH
    # Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    - name: Install deps
      run: choco install mingw

    - name: Get UMF version
      shell: pwsh
      run: |
        $version = (git describe --tags --abbrev=0 | Select-String -Pattern '\d+\.\d+\.\d+').Matches.Value
        echo "UMF_VERSION=$version" >> $env:GITHUB_ENV

      # call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
      # call "C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat"
    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -G "Unix Makefiles"
        -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}"
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DUMF_LINK_HWLOC_STATICALLY=ON
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=OFF
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=OFF
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=${{matrix.level_zero_provider}}
        -DUMF_BUILD_CUDA_PROVIDER=${{matrix.cuda_provider}}
        -DUMF_BUILD_TESTS=OFF

      # -DCMAKE_C_COMPILER_WORKS=1
      # -DCMAKE_CXX_COMPILER_WORKS=1
      # make -j 4
    - name: Build UMF
      working-directory: ${{env.BUILD_DIR}}
      shell: cmd
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j 4

    - name: Run tests
      if: false
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test
