# Builds project (with various compilers, CMake options, etc.) and runs tests
name: BasicBuilds

on: workflow_call

permissions:
  contents: read

env:
  BUILD_DIR : "${{github.workspace}}/build"
  INSTL_DIR : "${{github.workspace}}/install-dir"
  COVERAGE_DIR : "${{github.workspace}}/coverage"
  COVERAGE_NAME : "exports-coverage-basic"

jobs:
  windows-build:
    name: Windows
    env:
      VCPKG_PATH: "${{github.workspace}}/build/vcpkg/packages/hwloc_x64-windows;${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows;${{github.workspace}}/build/vcpkg/packages/jemalloc_x64-windows"
      VCPKG_PATH_BIN: "${{github.workspace}}/build/vcpkg/packages/hwloc_x64-windows/bin;${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows/bin;${{github.workspace}}/build/vcpkg/packages/jemalloc_x64-windows/bin"
    strategy:
      matrix:
        os: ['windows-2019', 'windows-2022']
        build_type: [Debug, Release]
        compiler: [{c: cl, cxx: cl}]
        shared_library: ['ON', 'OFF']
        level_zero_provider: ['ON']
        cuda_provider: ['ON']
        cmake_ver: ['default']
        include:
          - os: 'windows-2019'
            # clang build fails on Windows 2022
            build_type: Release
            compiler: {c: clang-cl, cxx: clang-cl}
            shared_library: 'ON'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            toolset: "-T ClangCL"
            cmake_ver: '3.14.0-win64-x64'
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: cl, cxx: cl}
            shared_library: 'ON'
            level_zero_provider: 'ON'
            cuda_provider: 'ON'
            umfd_lib: 'ON'
            cmake_ver: '3.28.0-windows-x86_64'
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: cl, cxx: cl}
            shared_library: 'ON'
            level_zero_provider: 'OFF'
            cuda_provider: 'OFF'
            cmake_ver: 'default'

    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    - name: Install cmake (non-default version)
      if: matrix.cmake_ver != 'default'
      run: |
        $ErrorActionPreference = "Stop"
        $cmakePath = "C:\Program Files\CMake"
        if (Test-Path -Path $cmakePath) {
          Write-Host "Removing existing CMake installation..."
          Remove-Item -Recurse -Force -Path $cmakePath
        }
        $cmakeInstaller = "cmake-${{matrix.cmake_ver}}.msi"
        $cmakeInstallerParts = $cmakeInstaller -split '-|\.'
        $cmakeMajorMinorPatch = "$($cmakeInstallerParts[1]).$($cmakeInstallerParts[2]).$($cmakeInstallerParts[3])"
        $cmakeUrl = "https://github.com/Kitware/CMake/releases/download/v$cmakeMajorMinorPatch/$cmakeInstaller"
        Write-Host "Downloading CMake version ${{matrix.cmake_ver}}..."
        Invoke-WebRequest -Uri $cmakeUrl -OutFile $cmakeInstaller -TimeoutSec 360
        Write-Host "Installing CMake version ${{matrix.cmake_ver}}..."
        Start-Process msiexec.exe -ArgumentList "/i $cmakeInstaller /quiet /norestart" -Wait
        cmake --version

    # Cache vcpkg packages and installed artifacts. They will be reused in 'vcpkg install'
    - name: Cache vcpkg packages
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-vcpkg-packages
      with:
        path: ${{env.BUILD_DIR}}/vcpkg/packages
        key:  vcpkg-packages-basic

    - name: Cache vcpkg installed
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-vcpkg-installed
      with:
        path: ${{env.BUILD_DIR}}/vcpkg/installed
        key:  vcpkg-installed-basic

    - name: Initialize vcpkg
      uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1 # v11.5
      with:
        vcpkgGitCommitId: ea2a964f9303270322cf3f2d51c265ba146c422d # 1.04.2025
        vcpkgDirectory: ${{env.BUILD_DIR}}/vcpkg
        vcpkgJsonGlob: '**/vcpkg.json'

    # Install the dependencies and add the bin folders to the PATH for older
    # versions of CMake to correctly locate the libraries
    - name: Install dependencies
      run: |
        vcpkg install --triplet x64-windows
        $env:Path = "${{env.VCPKG_PATH_BIN}};$env:Path"
        echo "PATH=$env:Path" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Get UMF version
      run: |
        $version = (git describe --tags --abbrev=0 | Select-String -Pattern '\d+\.\d+\.\d+').Matches.Value
        echo "UMF_VERSION=$version" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        ${{matrix.toolset}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}"
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=${{matrix.level_zero_provider}}
        -DUMF_BUILD_CUDA_PROVIDER=${{matrix.cuda_provider}}
        -DUMF_TESTS_FAIL_ON_SKIP=ON
        -DUMF_USE_DEBUG_POSTFIX=${{matrix.umfd_lib}}

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      # For CMake versions < 3.22 we have to add the build directory to the PATH
      # manually
      run: |
        $m = [regex]::Matches((cmake --version), "cmake version (\d+)\.(\d+)\.(\d+)")
        if ($m) {
          $major = [int]$m.groups[1].Value
          $minor = [int]$m.groups[2].Value
          if ($major -lt 3 -or ($major -eq 3 -and $minor -lt 22)) {
            $env:Path = "${{env.BUILD_DIR}}/bin/${{matrix.build_type}};${{env.BUILD_DIR}}/src/proxy_lib/${{matrix.build_type}};$env:Path"
          }
        }
        ctest -C ${{matrix.build_type}} --output-on-failure --test-dir test
      shell: pwsh

    - name: Test UMF installation and uninstallation
      # The '--shared-library' parameter is added to the installation test when
      # the UMF is built as a shared library
      run: >
        python3 ${{github.workspace}}/test/test_installation.py
        --build-dir ${{env.BUILD_DIR}}
        --install-dir ${{env.INSTL_DIR}}
        --build-type ${{matrix.build_type}}
        ${{matrix.shared_library == 'ON' && '--proxy' || '' }}
        --umf-version ${{env.UMF_VERSION}}
        ${{ matrix.shared_library == 'ON' && '--shared-library' || ''}}
        ${{ matrix.umfd_lib == 'ON' && '--umfd-lib' || ''}}
        
    - name: check /DEPENDENTLOADFLAG in umf.dll
      if: ${{matrix.shared_library == 'ON' && matrix.compiler.cxx == 'cl'}}
      run: ${{github.workspace}}/.github/scripts/check_dll_flags.ps1 ${{env.BUILD_DIR}}/bin/${{matrix.build_type}}/umf.dll
      shell: pwsh

    - name: check /DEPENDENTLOADFLAG in umf_proxy.dll
      if: ${{matrix.shared_library == 'ON' && matrix.compiler.cxx == 'cl'}}
      run: ${{github.workspace}}/.github/scripts/check_dll_flags.ps1 ${{env.BUILD_DIR}}/src/proxy_lib/${{matrix.build_type}}/umf_proxy.dll
      shell: pwsh
